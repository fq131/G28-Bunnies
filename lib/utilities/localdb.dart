//ignore localdb.g.dart, is autogenerated file

import 'dart:async';

import 'package:realm/realm.dart';
part 'localdb.g.dart';

@RealmModel()
class _Restaurant {
  @PrimaryKey()
  late ObjectId id;

  late String name;
}

class RestHelper {
//define config obj
  final _config = Configuration.local([Restaurant.schema]);
  late Realm realm;

  RestHelper() {
    openRealm();
  }

  openRealm() {
    realm = Realm(_config);
  }

  closeRealm() {
    if (realm.isClosed) {
      realm.close();
    }
  }

//get all data
  Future<List<Map<String, dynamic>>> getAllRest() async {
    final RealmResults<Restaurant> realmResults = realm.all<Restaurant>();

    // Convert RealmResults<Restaurant> to List<Map<String, dynamic>>
    List<Map<String, dynamic>> listOfMaps = realmResults
        .map((rest) => {
              'id': rest.id,
              'name': rest.name,
            })
        .toList();
    return listOfMaps;
  }

  // get name
  Future<List<String>> getName() async {
    final RealmResults<Restaurant> getName = realm.all<Restaurant>();

    List<String> names = getName.map((rest) => rest.name).toList();
    print(names);
    return names;
  }

//add data
  Future<void> addRest(String name) async {
    realm.write(() {
      return realm.add(Restaurant(ObjectId(), name));
    });
  }

//update data
  Future<void> updateRest(ObjectId id, String name) async {
    realm.write(() {
      final restupdate = realm.find<Restaurant>(id);
      if (restupdate != null) {
        restupdate.name = name;
      }
    });
  }

//dlt data
  Future<void> deleteRest(ObjectId id) async {
    realm.write(() {
      final restdelete = realm.find<Restaurant>(id);
      if (restdelete != null) {
        realm.delete(restdelete);
      }
    });
  }
}
